/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ar.hotelalura.hotelchallenge.igu;

import ar.hotelalura.hotelchallenge.logica.Controladora;
import ar.hotelalura.hotelchallenge.logica.Huesped;
import ar.hotelalura.hotelchallenge.logica.Reserva;
import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatMaterialLighterIJTheme;
import java.awt.Color;
import java.util.Date;
import java.util.List;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Juan Bravo
 */
public class PantallaBusqueda extends javax.swing.JFrame {
    
    Controladora control = null;
    PantallaReservas reservasP = null;
    PantallaReservasMod reservasMod = null;
    Mensaje mensajeError = null;

    int xMouse, yMouse;
    public PantallaBusqueda() {
        initComponents();
        FlatMaterialLighterIJTheme.setup();
        control = new Controladora();
        reservasP = new PantallaReservas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        panelSuperior = new javax.swing.JPanel();
        btnExit = new javax.swing.JPanel();
        txtExit = new javax.swing.JLabel();
        btnAtras = new javax.swing.JPanel();
        txtAtras = new javax.swing.JLabel();
        imgIcono = new javax.swing.JLabel();
        txtBusqueda = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        inputBusqueda = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JPanel();
        txtBuscar = new javax.swing.JLabel();
        panelTablas = new javax.swing.JTabbedPane();
        ScrollReservas = new javax.swing.JScrollPane();
        tReservas = new javax.swing.JTable();
        ScrollHuspedes = new javax.swing.JScrollPane();
        tHuspedes = new javax.swing.JTable();
        btnEliminar = new javax.swing.JPanel();
        txtEliminar = new javax.swing.JLabel();
        btnEditar = new javax.swing.JPanel();
        txtEditar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelSuperior.setBackground(new java.awt.Color(255, 255, 255));
        panelSuperior.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelSuperior.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelSuperiorMouseDragged(evt);
            }
        });
        panelSuperior.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelSuperiorMousePressed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(255, 255, 255));

        txtExit.setBackground(new java.awt.Color(0, 0, 0));
        txtExit.setFont(new java.awt.Font("Roboto Medium", 1, 20)); // NOI18N
        txtExit.setForeground(new java.awt.Color(0, 0, 0));
        txtExit.setText("X");
        txtExit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtExitMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtExitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtExitMouseExited(evt);
            }
        });

        javax.swing.GroupLayout btnExitLayout = new javax.swing.GroupLayout(btnExit);
        btnExit.setLayout(btnExitLayout);
        btnExitLayout.setHorizontalGroup(
            btnExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnExitLayout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(txtExit)
                .addGap(28, 28, 28))
        );
        btnExitLayout.setVerticalGroup(
            btnExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnExitLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(txtExit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAtras.setBackground(new java.awt.Color(255, 255, 255));
        btnAtras.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        txtAtras.setBackground(new java.awt.Color(0, 0, 0));
        txtAtras.setFont(new java.awt.Font("Roboto Medium", 1, 24)); // NOI18N
        txtAtras.setForeground(new java.awt.Color(0, 0, 0));
        txtAtras.setText("<");
        txtAtras.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtAtras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtAtrasMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtAtrasMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtAtrasMouseExited(evt);
            }
        });

        javax.swing.GroupLayout btnAtrasLayout = new javax.swing.GroupLayout(btnAtras);
        btnAtras.setLayout(btnAtrasLayout);
        btnAtrasLayout.setHorizontalGroup(
            btnAtrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnAtrasLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(txtAtras)
                .addGap(14, 14, 14))
        );
        btnAtrasLayout.setVerticalGroup(
            btnAtrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnAtrasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtAtras)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelSuperiorLayout = new javax.swing.GroupLayout(panelSuperior);
        panelSuperior.setLayout(panelSuperiorLayout);
        panelSuperiorLayout.setHorizontalGroup(
            panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSuperiorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 877, Short.MAX_VALUE)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelSuperiorLayout.setVerticalGroup(
            panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelSuperiorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAtras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        background.add(panelSuperior, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 60));

        imgIcono.setIcon(new javax.swing.ImageIcon("C:\\Users\\Juan Bravo\\Desktop\\HotelChallenge2\\src\\imagenes\\aH-150px.png")); // NOI18N
        background.add(imgIcono, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 150, 140));

        txtBusqueda.setFont(new java.awt.Font("Roboto Black", 1, 30)); // NOI18N
        txtBusqueda.setForeground(new java.awt.Color(14, 139, 199));
        txtBusqueda.setText("SISTEMA DE BÃšSQUEDA");
        background.add(txtBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 70, -1, -1));

        jSeparator1.setBackground(new java.awt.Color(14, 139, 199));
        jSeparator1.setForeground(new java.awt.Color(14, 139, 199));
        jSeparator1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jSeparator1.setMinimumSize(new java.awt.Dimension(50, 30));
        jSeparator1.setPreferredSize(new java.awt.Dimension(50, 30));
        background.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 170, 220, 8));

        inputBusqueda.setBackground(new java.awt.Color(255, 255, 255));
        inputBusqueda.setFont(new java.awt.Font("Roboto Light", 1, 18)); // NOI18N
        inputBusqueda.setText("Num. reserva o Apellido");
        inputBusqueda.setBorder(null);
        inputBusqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inputBusquedaMouseClicked(evt);
            }
        });
        background.add(inputBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 120, 220, 47));

        btnBuscar.setBackground(new java.awt.Color(14, 139, 199));

        txtBuscar.setBackground(new java.awt.Color(14, 139, 199));
        txtBuscar.setFont(new java.awt.Font("Roboto Light", 1, 18)); // NOI18N
        txtBuscar.setForeground(new java.awt.Color(255, 255, 255));
        txtBuscar.setText("    BUSCAR");
        txtBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtBuscarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout btnBuscarLayout = new javax.swing.GroupLayout(btnBuscar);
        btnBuscar.setLayout(btnBuscarLayout);
        btnBuscarLayout.setHorizontalGroup(
            btnBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
        );
        btnBuscarLayout.setVerticalGroup(
            btnBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        background.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 130, -1, 40));

        panelTablas.setBackground(new java.awt.Color(255, 255, 255));
        panelTablas.setForeground(new java.awt.Color(0, 0, 0));
        panelTablas.setToolTipText("");
        panelTablas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelTablas.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N

        ScrollReservas.setBackground(new java.awt.Color(255, 255, 255));

        tReservas.setBackground(new java.awt.Color(255, 255, 255));
        tReservas.setFont(new java.awt.Font("Roboto Light", 0, 16)); // NOI18N
        tReservas.setForeground(new java.awt.Color(0, 0, 0));
        tReservas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        ScrollReservas.setViewportView(tReservas);

        panelTablas.addTab("Reservas", ScrollReservas);

        ScrollHuspedes.setBackground(new java.awt.Color(255, 255, 255));

        tHuspedes.setBackground(new java.awt.Color(255, 255, 255));
        tHuspedes.setFont(new java.awt.Font("Roboto Light", 0, 16)); // NOI18N
        tHuspedes.setForeground(new java.awt.Color(0, 0, 0));
        tHuspedes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        ScrollHuspedes.setViewportView(tHuspedes);

        panelTablas.addTab("HÃºespedes", ScrollHuspedes);

        background.add(panelTablas, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, 900, 330));

        btnEliminar.setBackground(new java.awt.Color(14, 139, 199));

        txtEliminar.setBackground(new java.awt.Color(14, 139, 199));
        txtEliminar.setFont(new java.awt.Font("Roboto Light", 1, 18)); // NOI18N
        txtEliminar.setForeground(new java.awt.Color(255, 255, 255));
        txtEliminar.setText("     ELIMINAR");
        txtEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtEliminarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout btnEliminarLayout = new javax.swing.GroupLayout(btnEliminar);
        btnEliminar.setLayout(btnEliminarLayout);
        btnEliminarLayout.setHorizontalGroup(
            btnEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
        );
        btnEliminarLayout.setVerticalGroup(
            btnEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtEliminar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        background.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 570, 120, -1));

        btnEditar.setBackground(new java.awt.Color(14, 139, 199));

        txtEditar.setBackground(new java.awt.Color(14, 139, 199));
        txtEditar.setFont(new java.awt.Font("Roboto Light", 1, 18)); // NOI18N
        txtEditar.setForeground(new java.awt.Color(255, 255, 255));
        txtEditar.setText("       EDITAR");
        txtEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtEditarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout btnEditarLayout = new javax.swing.GroupLayout(btnEditar);
        btnEditar.setLayout(btnEditarLayout);
        btnEditarLayout.setHorizontalGroup(
            btnEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtEditar, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
        );
        btnEditarLayout.setVerticalGroup(
            btnEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtEditar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        background.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 570, 120, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtExitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_txtExitMouseClicked

    private void txtExitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtExitMouseEntered

        txtExit.setForeground(new Color(14,139,199));
    }//GEN-LAST:event_txtExitMouseEntered

    private void txtExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtExitMouseExited

        txtExit.setForeground(new Color(0,0,0));
    }//GEN-LAST:event_txtExitMouseExited

    private void panelSuperiorMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelSuperiorMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_panelSuperiorMouseDragged

    private void panelSuperiorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelSuperiorMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_panelSuperiorMousePressed

    private boolean comprobarString(String busqueda){
    return busqueda != null && busqueda.matches("^[a-zA-Z]*$");
    }
    
   private boolean comprobarInt(String busqueda){
    return busqueda != null && busqueda.matches("[0-9]+");
    }
    
    
    
    
    
    private void txtBuscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBuscarMouseClicked
        String comprobacionDato = inputBusqueda.getText();
        
        if(comprobarString(comprobacionDato)){
            String busquedaApellido = comprobacionDato;
            cargarTablaHuespedesBusqueda(busquedaApellido);
              
        }else if(comprobarInt(comprobacionDato)){
            int busquedaId = Integer.parseInt(comprobacionDato);
            cargarTablaReservasBusqueda(busquedaId);
        
        }else{
                  mensajeError = new Mensaje("ADVERTENCIA","Dato de busqueda no valido");
                        
                  mensajeError.setVisible(true);
                  mensajeError.setLocationRelativeTo(null); 
            
        }
              
    }//GEN-LAST:event_txtBuscarMouseClicked

    private void txtAtrasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAtrasMouseClicked
        MenuUsuario usuario = new MenuUsuario();
        usuario.setVisible(true);
        usuario.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_txtAtrasMouseClicked

    private void txtAtrasMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAtrasMouseEntered
        txtAtras.setForeground(new Color(14,139,199));
    }//GEN-LAST:event_txtAtrasMouseEntered

    private void txtAtrasMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAtrasMouseExited
        txtAtras.setForeground(new Color(0,0,0));
    }//GEN-LAST:event_txtAtrasMouseExited

    private void txtEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEliminarMouseClicked
        if(tReservas.getRowCount() > 0 || tHuspedes.getRowCount() > 0){
            
                    boolean rowReserva = tReservas.getSelectedRow() != -1;
                    boolean rowHuesped = tHuspedes.getSelectedRow() != -1;
                    
                    
                 
                  if( rowReserva != rowHuesped || rowHuesped != rowReserva ){
                      
                        mensajeError = new Mensaje("ADVERTENCIA","Debe seleccionar el registro correspondiente en ambas tablas");
                        
                        mensajeError.setVisible(true);
                        mensajeError.setLocationRelativeTo(null);     
                  
                  }else if(rowReserva == true && rowHuesped == true){
                           int numHuesped = Integer.parseInt((String.valueOf(tHuspedes.getValueAt(tHuspedes.getSelectedRow(),0))));
                            int numReserva = Integer.parseInt((String.valueOf(tReservas.getValueAt(tReservas.getSelectedRow(),0))));
                  
                           if(numReserva != numHuesped || numHuesped != numReserva){
                               
                                mensajeError = new Mensaje("ADVERTENCIA","Debe borrar el registro con el mismo numero de reserva");
                        
                                mensajeError.setVisible(true);
                                mensajeError.setLocationRelativeTo(null);  
                  
                            }else{
                           
                                    control.borrar(numHuesped,numReserva);
                                    
                                    mensajeError = new Mensaje("EXITO","Fila Eliminada");
                        
                                     mensajeError.setVisible(true);
                                     mensajeError.setLocationRelativeTo(null);
                                    
                           
                                     cargarTablaHuespedes();
                                      cargarTablaReservas();
                                      }
                  }
                  else{
                                mensajeError = new Mensaje("ADVERTENCIA","No selecciono ninguna fila");
                        
                                mensajeError.setVisible(true);
                                mensajeError.setLocationRelativeTo(null);
                                    
                  }      
         }else{
            
                                mensajeError = new Mensaje("ADVERTENCIA","No hay nada para eliminar en la tabla");
                        
                                mensajeError.setVisible(true);
                                mensajeError.setLocationRelativeTo(null);
        
            
          }            
                                       
    }//GEN-LAST:event_txtEliminarMouseClicked

    private void txtEditarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEditarMouseClicked
        if(tReservas.getRowCount() > 0 || tHuspedes.getRowCount() > 0){
            
                    boolean rowReserva = tReservas.getSelectedRow() != -1;
                    boolean rowHuesped = tHuspedes.getSelectedRow() != -1;
                    
                    
                 
                  if( rowReserva != rowHuesped || rowHuesped != rowReserva ){
                        mensajeError = new Mensaje("ADVERTENCIA","Debe seleccionar el registro correspondiente en ambas tablas");
                        
                        mensajeError.setVisible(true);
                        mensajeError.setLocationRelativeTo(null); 
                            
                  
                  }else if(rowReserva == true && rowHuesped == true){
                           int numHuesped = Integer.parseInt((String.valueOf(tHuspedes.getValueAt(tHuspedes.getSelectedRow(),6))));
                           int numReserva = Integer.parseInt((String.valueOf(tReservas.getValueAt(tReservas.getSelectedRow(),0))));
                  
                           if(numReserva != numHuesped || numHuesped != numReserva){
                               mensajeError = new Mensaje("ADVERTENCIA","Debe borrar el registro con el mismo numero de reserva");
                        
                                mensajeError.setVisible(true);
                                mensajeError.setLocationRelativeTo(null); 
                  
                            }else{
                                     reservasMod = new PantallaReservasMod(numReserva, numHuesped); 
                                     
                                    reservasMod.setVisible(true);
                                    reservasMod.setLocationRelativeTo(null);
        
                                    this.dispose();
                                   
                                      }
                  }
                  else{
                      
                                mensajeError = new Mensaje("ADVERTENCIA","No selecciono ninguna fila");
                        
                                mensajeError.setVisible(true);
                                mensajeError.setLocationRelativeTo(null);
                  }      
         }else{
        
                                mensajeError = new Mensaje("ADVERTENCIA","No hay nada para eliminar en la tabla");
                        
                                mensajeError.setVisible(true);
                                mensajeError.setLocationRelativeTo(null);
          }
        
    }//GEN-LAST:event_txtEditarMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       cargarTablaReservas();
       cargarTablaHuespedes();
    }//GEN-LAST:event_formWindowOpened

    private void inputBusquedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputBusquedaMouseClicked
       inputBusqueda.setText("");
    }//GEN-LAST:event_inputBusquedaMouseClicked

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollHuspedes;
    private javax.swing.JScrollPane ScrollReservas;
    private javax.swing.JPanel background;
    private javax.swing.JPanel btnAtras;
    private javax.swing.JPanel btnBuscar;
    private javax.swing.JPanel btnEditar;
    private javax.swing.JPanel btnEliminar;
    private javax.swing.JPanel btnExit;
    private javax.swing.JLabel imgIcono;
    private javax.swing.JTextField inputBusqueda;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JTabbedPane panelTablas;
    private javax.swing.JTable tHuspedes;
    private javax.swing.JTable tReservas;
    private javax.swing.JLabel txtAtras;
    private javax.swing.JLabel txtBuscar;
    private javax.swing.JLabel txtBusqueda;
    private javax.swing.JLabel txtEditar;
    private javax.swing.JLabel txtEliminar;
    private javax.swing.JLabel txtExit;
    // End of variables declaration//GEN-END:variables

    public void cargarTablaReservas() {
        
        DefaultTableModel tablaReservas = new DefaultTableModel() {
        
            @Override
            public boolean isCellEditable (int row, int column){
            
                return false;
            }
        };
        
        String titulos[] = { "Num. Reserva", "Check In", "Check Out", "Pago", "Valor"};
        tablaReservas.setColumnIdentifiers(titulos);
        
        List<Reserva> listaReserva = control.traerReservas();
        
        
        if(listaReserva != null){
        
            for(Reserva reserva : listaReserva){
                
                Date checkIn = reservasP.convertirFecha(reserva.getCheckIn());
                Date checkOut = reservasP.convertirFecha(reserva.getCheckOut());
                
            
                Object[] reservas = { reserva.getId(), checkIn,checkOut , reserva.getPago(), reserva.getValor()};
                
                tablaReservas.addRow(reservas);
                
            }
        
        }
        
        tReservas.setModel(tablaReservas);
        
    }

    public void cargarTablaHuespedes() {
       DefaultTableModel tablaHuespedes = new DefaultTableModel() {
        
            @Override
            public boolean isCellEditable (int row, int column){
            
                return false;
            }
        
        };
       String titulos[] = { "Num. Cliente","Nombre", "Apellido", "Fecha de Nacimiento", "Nacionalidad","Telefono", "Num. Reserva"};
        tablaHuespedes.setColumnIdentifiers(titulos);
       
       List<Huesped> listaHuespedes = control.traerHuespedes();
       
       if(listaHuespedes != null){
       
           for(Huesped huesped : listaHuespedes){
               
               Date Fnacimiento = reservasP.convertirFecha(huesped.getfNacimiento());
               
               Object[] huespedes = {huesped.getId(),huesped.getNombre(), huesped.getApellido(),Fnacimiento , huesped.getNacionalidad(), huesped.getTelefono(), huesped.getNumReserva().getId()};
               
               tablaHuespedes.addRow(huespedes);
           }
       
       }
       
       tHuspedes.setModel(tablaHuespedes);
       
    }
    
    
     public void cargarTablaReservasBusqueda(int busquedaId) {
        
        DefaultTableModel tablaReservas = new DefaultTableModel() {
        
            @Override
            public boolean isCellEditable (int row, int column){
            
                return false;
            }
        };
        
        String titulos[] = { "Num. Reserva", "Check In", "Check Out", "Pago", "Valor"};
        tablaReservas.setColumnIdentifiers(titulos);
        
        List<Reserva> listaReserva = control.traerReservas();
        
        
        if(listaReserva != null){
        
            for(Reserva reserva : listaReserva){
                
                if(reserva.getId() == busquedaId){
                    
                    Date checkIn = reservasP.convertirFecha(reserva.getCheckIn());
                    Date checkOut = reservasP.convertirFecha(reserva.getCheckOut());
                    
                
                Object[] reservas = { reserva.getId(), checkIn, checkOut, reserva.getPago(), reserva.getValor()};
                
                tablaReservas.addRow(reservas);
                
                }
            
            }
        
        }
        
        tReservas.setModel(tablaReservas);
        
    }
    
    
    
    
    
    public void cargarTablaHuespedesBusqueda(String busqueda) {
       DefaultTableModel tablaHuespedes = new DefaultTableModel() {
        
            @Override
            public boolean isCellEditable (int row, int column){
            
                return false;
            }
        
        };
       String titulos[] = { "Num. Cliente","Nombre", "Apellido", "Fecha de Nacimiento", "Nacionalidad","Telefono", "Num. Reserva"};
        tablaHuespedes.setColumnIdentifiers(titulos);
       
       List<Huesped> listaHuespedes = control.traerHuespedes();
       
       if(listaHuespedes != null){
       
           for(Huesped huesped : listaHuespedes){
               
               if(huesped.getApellido().equals(busqueda)){
                   
                   Date Fnacimiento = reservasP.convertirFecha(huesped.getfNacimiento());
               
                Object[] huespedes = {huesped.getId(),huesped.getNombre(), huesped.getApellido(), Fnacimiento, huesped.getNacionalidad(), huesped.getTelefono(), huesped.getNumReserva().getId()};
               
               tablaHuespedes.addRow(huespedes);
               }
           }
       
       }
       
       tHuspedes.setModel(tablaHuespedes);
       
    }
    
}
